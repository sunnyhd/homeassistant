template:

  ####################################################
  #                                                  #
  #                     TEMPLATE                     #
  #                                                  #
  ####################################################

  sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: |
          {%- set hours = '<span>' + now().strftime('%H') + '<span>' %}
          {%- set minutes = '</span>' + now().strftime('%M') + '</span>' %}
          {{ hours }}:{{ minutes }}
        date: |
          <font color='#6a7377'><b>
          {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {%- set days = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] %}
          {%- set months = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni',
          'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'] %}
            {{- days[now().weekday()] }}<br>
            {{- strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {%- endif -%}
          </b></font>
        greet: |
          <b>
          {%- set time = now().hour %}
          {%- if time <= 1 -%} Gute Nacht {{'\U0001F611'}}
          {%- elif time <= 3 -%} Gute Nacht {{'\U0001F62A'}}
          {%- elif time <= 5 -%} Gute Nacht {{'\U0001F634'}}
          {%- elif time <= 7 -%} Guten Morgen {{'\U0001F4A9'}}
          {%- elif time <= 9 -%} Guten Morgen {{'\u2615\uFE0F'}}
          {%- elif time <= 10 -%} Guten Morgen {{'\U0001F642'}}
          {%- elif time <= 13 -%} Guten Tag {{'\U0001F60A'}}
          {%- elif time <= 15 -%} Guten Tag {{'\U0001F60E'}}
          {%- elif time <= 17 -%} Guten Tag {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 19 -%} Guten Abend {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 22 -%} Guten Abend {{'\U0001F60C'}}
          {%- elif time <= 23 -%} Guten Abend {{'\U0001F974'}}
          {%- else %} Guten Abend {{'\U0001F974'}}
          {%- endif -%}
          </b>
        appliances: |
          <b>

          {%- if (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float > 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float <= 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float <= 7) -%}
            Die Spülmaschine ist an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float <= 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float > 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float <= 7) -%}
            Die Waschmaschine ist an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float <= 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float <= 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float > 7) -%}
            Der Trockner ist an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float > 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float > 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float <= 7) -%}
            Spülmaschine und Waschmaschine sind an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float > 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float <= 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float > 7) -%}
            Spülmaschine und Trockner sind an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float <= 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float > 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float > 7) -%}
            Waschmaschine und Tockner sind an.

          {%- elif (state_attr("switch.steckdose_spulmaschine", "current_power_w")|float > 100) and (state_attr("switch.steckdose_waschmaschine", "current_power_w")|float > 3.9) and (state_attr("switch.steckdose_trockner", "current_power_w")|float > 7) -%}
            Spülmaschine, Waschmaschine und Trockner sind an.

          {%- else %}

          {%- endif -%}
          </b>
        active: |
          <b>
          {%- set lights = [
            states.light.ankleide_nahtisch_links,
            states.light.ankleide_nahtisch_rechts,
            states.light.ankleide_nahtisch_wand,
            states.light.buro_deckenlampe,
            states.light.buro_schreibtisch,
            states.light.nahtisch,
            states.light.deckenlampen_flur,
            states.light.eingangstuer_decke,
            states.light.kinderzimmer_deckenlampe,
            states.light.kinderzimmer_tischleuchte,
            states.light.kuche_esstisch,
            states.light.kuche_herd,
            states.light.schlafzimmer_deckenlampe,
            states.light.schlafzimmer_nachttisch_lisa,
            states.light.schlafzimmer_nachttisch_simon,
            states.light.shelly_badspiegel,
            states.light.shelly_deckenlampe_bad,
            states.light.stehlampe_wohnzimmer_links,
            states.light.wandlampen_treppenhaus,
            states.light.wohnzimmer_deckenlampe,
            states.light.wohnzimmer_lightstrip,
            states.light.wohnzimmer_stehlampe_rechts
          ] %}

          {%- set switches = [
            states.switch.computer_imac,
            states.switch.tv_sony,
            states.switch.tv_samsung,
            states.switch.playstation_5,
            states.switch.wemo_monitors,
            states.fan.studio_wemo,
            states.fan.sovrum_anslut,
            states.fan.air_purifier
          ] %}


          {%- set lights_on = lights | selectattr('state','eq','on') | list %}
          {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set switches_on = switches | selectattr('state','eq','on') | list %}
          {%- set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set appliances_on = appliances | selectattr('state','eq','on') | list %}
          {%- set appliances_name = appliances | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}


          {%- if (lights_on | length == 0) and (appliances_on | length == 0) and (switches_on | length > 0) -%}
            {{ switches_name | regex_replace(',([^,]*)$',' und\\1') }} ist an

          {%- elif (lights_on | length == 1) and (appliances_on | length == 0) and (switches_on | length == 1) -%}
            {{ lights_name }} und {{switches_name }} ist an

          {%- elif (lights_on | length == 1) and (appliances_on | length == 0) and (switches_on | length > 1) -%}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' und\\1') }} sind an

          {%- elif (lights_on | length > 1) and (appliances_on | length == 0) and (switches_on | length == 1) -%}
            {{ lights_on | length }} Lampen und {{ switches_name }} sind an

          {%- elif (lights_on | length > 1) and (appliances_on | length == 0) and (switches_on | length > 1) -%}
            {{ lights_on | length }} Lampen, {{ switches_name | regex_replace(',([^,]*)$',' und\\1') }} sind an

          {%- elif (lights_on | length == 1) and (appliances_on | length == 0) and (switches_on | length == 0) -%}
            {{ lights_name }} ist an

          {%- elif (lights_on | length > 1) and (appliances_on | length == 0) and (switches_on | length == 0) -%}
            {{ lights_on | length }} Lampen sind an


          {%- else %}

          {%- endif -%}
          </b>
        vacuum: |
          {% set entity_id = 'vacuum.xiaomi_vacuum_cleaner' %}
          {%- if is_state(entity_id, 'cleaning') -%}
            <b>Robi saugt</b>
          {%- elif is_state(entity_id, 'returning') -%}
            <b>Robi ist fertig</b>
          {%- endif %}
        weather: |
          {%- set temperature = states('sensor.temperature_kraichtal_gochsheim') %}
          {%- set apparent = states('sensor.einganstuer_bewegungsmelder_temperature') | round %}
          {%- set precip = states('sensor.precipitation_probability_kraichtal_gochsheim') | round %}
          {% if not is_state('sensor.temperature_kraichtal_gochsheim', 'unknown') %}
            {%- if temperature | float <= 0.0 -%}
              Aktuell {{ apparent }}° mit {{ precip }}% Schneerisiko {{'\u2744\uFE0F'}}
            {%- elif temperature | float > 0.0 -%}
              Aktuell {{ apparent}}° mit {{ precip }}% Regenwahrscheinlichkeit {{ '\u2614\uFE0F' if precip > 30 }}
            {%- endif %}
          {%- else %}
            Kann keine Wetterinformationen lesen...
          {%- endif %}
        transport: |
          {% set entity_id = 'sensor.oberacker_rathaus_kraichtal_to_munzesheim_bahnhof_kraichtal' %}
          {%- set time = state_attr(entity_id, 'departure') %}
            Der nächste Bus nach Münzesheim geht um {{ time }} Uhr

    - unique_id: coronavirus
      icon: mdi:virus
      state: template
      attributes:
        template: >
          {% if is_state('sensor.covid_19_folkhalsomyndigheten', 'Tillgänglig') %}
            {% set data = state_attr('sensor.covid_19_folkhalsomyndigheten', 'embedCode') %}
            {% set total = data | regex_findall_index('Totalt[^,]*?(\d+)[^,]*?(\d+)[^,]*?(\d+)') | list %}
            {% set break = '‍ ‍ ‍ ‍ ‍ ‍<font color="#2f3436">|</font> ‍ ‍ ‍ ‍ ' %}
            <font color='#6a7377'>
            <ha-icon icon="mdi:virus"></ha-icon> <b>Coronavirus</b>{{ break -}}
            <ha-icon icon="mdi:chart-bar"></ha-icon> <b>{{ ((total[0] | int / 10327589) * 100) | round(2) }}%</b> av Sverige{{ break -}}
            <ha-icon icon="mdi:emoticon-sad"></ha-icon> <b>{{ total[0] }}</b> fall{{ break -}}
            <ha-icon icon="mdi:grave-stone"></ha-icon> <b>{{ total[2] }}</b> avlidna{{ break -}}
            <ha-icon icon="mdi:map-marker-radius"></ha-icon> <b>{{ data | regex_findall_index('Skåne[^,]*?(\d+)') }}</b> fall i Skåne
            </font>
          {% endif %}

    - unique_id: public_ip
      icon: mdi:ip
      state: sensor.fritz_box_6490_cable_external_ip

    - unique_id: imac_vpn
      state: >
        {{ 'Ej Ansluten' if is_state('switch.computer_imac', 'on') and
        states('sensor.imac_ip') == states('sensor.template_public_ip') else 'Ansluten' }}
      icon: >
        mdi:shield-{{ 'alert' if is_state('switch.computer_imac', 'on') and
        states('sensor.imac_ip') == states('sensor.template_public_ip') else 'check' }}

    - unique_id: printer_status
      icon: mdi:printer-wireless
      name: Ducker Status
      state: >
        {% macro prt(state, translate) %}
        {{ translate if states('sensor.simon_drucker_status') == state }}
        {% endmacro %}
        {{ prt('On', 'På') }}
        {{ prt('Scanning', 'Scannt') }}
        {{ prt('Copying', 'Kopiert') }}
        {{ prt('Printing', 'Druckt') }}
        {{ prt('Cancelling Job', 'Bricht ab') }}
        {{ prt('trayEmptyOrOpen', 'Kein Papier') }}
        {{ prt('Idle', 'Ruhemodus') }}
        {{ prt('Off', 'Aus') }}

    - unique_id: roborock_filter
      icon: custom:roborock-filter
      unit_of_measurement: '%'
      state: >
        {{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') | float / 150 * 100 | round }}

    - unique_id: roborock_mainbrush
      icon: custom:roborock-mainbrush
      unit_of_measurement: '%'
      state: >
        {{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') | float / 302 * 100 | round }}

    - unique_id: roborock_sensors
      icon: custom:roborock-sensor
      unit_of_measurement: '%'
      state: >
        {{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') | float / 29.1 * 100 | round }}

    - unique_id: roborock_sidebrush
      icon: custom:roborock-sidebrush
      unit_of_measurement: '%'
      state: >
        {{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') | float / 202 * 100 | round }}

    - unique_id: roborock_last_clean
      icon: mdi:calendar-clock
      device_class: timestamp
      state: >
        {{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'clean_stop') | replace(' ','T') }}

    - unique_id: fullykiosk_storage
      icon: mdi:sd
      unit_of_measurement: '%'
      state: >
        {% set FreeSpace = states('sensor.galaxy_tab_a_internal_storage_free_space') | float %}
        {% set TotalSpace = states('sensor.galaxy_tab_a_internal_storage_total_space') | float %}
        {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
          {{ 100 - (FreeSpace / TotalSpace * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_memory
      icon: mdi:memory
      unit_of_measurement: '%'
      state: >
        {% set FreeMemory = states('sensor.galaxy_tab_a_ram_free_memory') | float %}
        {% set TotalMemory = states('sensor.galaxy_tab_a_ram_total_memory') | float %}
        {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
          {{ 100 - (FreeMemory / TotalMemory * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_last_app_start
      icon: mdi:update
      device_class: timestamp
      state: >
        {{ states('sensor.galaxy_tab_a_last_app_start') | replace(' ','T') }}

    - unique_id: nas_status
      icon: custom:synology-nas
      state: >
        {% set entity_id = 'sensor.nas_volume_1_status' %}
        {% if is_state(entity_id, 'normal') %}
          Gut
        {% elif is_state(entity_id, 'background') %}
          Prüfen
        {% else %}
          {{ states(entity_id) }}
        {% endif %}

    - unique_id: nas_vpn
      state: >
        {{ 'Ej Ansluten' if states('sensor.myip') == states('sensor.template_public_ip') else 'Ansluten' }}
      icon: >
        mdi:shield-{{ 'alert' if states('sensor.myip') == states('sensor.template_public_ip') else 'check' }}

#legacy
sensor:

  - platform: template
    sensors:
      hass_version:
        icon_template: mdi:home-assistant
        friendly_name_template: >
          Installiert {{ states('sensor.hass_version_installed') }}
        value_template: >
          {{ 'Aktuell' if states('sensor.hass_version_installed') ==
          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}

      hass_dev_release:
        icon_template: mdi:dev-to
        device_class: timestamp
        friendly_name_template: >
          {% set release = state_attr('calendar.home_assistant_devs','message') %}
          {% if release == 'Home Assistant Core Beta Release' %}
            Nächste Beta
          {% elif release == 'Home Assistant Core Release' %}
            Nächster Release
          {% else %}
            {{ release }}
          {% endif %}
        value_template: >
          {{ state_attr('calendar.home_assistant_devs', 'start_time') | replace(' ','T') }}

      nas_net_down:
        value_template: ' '
        icon_template: mdi:arrow-down-bold
        friendly_name_template: >
          {% set down = states('sensor.network_throughput_in_eno1') | float %}
          {% if down < 1 %} {{ down * 8000 | round(0) }} kb/s
          {% elif down >= 1 %} {{ ((down ) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      nas_net_up:
        value_template: ' '
        icon_template: mdi:arrow-up-bold
        friendly_name_template: >
          {% set up = states('sensor.network_throughput_out_eno1') | float %}
          {% if up < 1 %} {{ up * 8000 | round(0) }} kb/s
          {% elif up >= 1 %} {{ ((up ) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}
